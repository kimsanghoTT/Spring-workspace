spring.application.name=AjaxDupCheck

#application.properties에는 name만 작성하고 config.properties 파일에 아래 정보를 모두 작성

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
spring.datasource.username=KH_TEST
spring.datasource.password=KH1234

server.port = 8108

mybatis.mapper-locations=classpath:/mappers/*.xml

#Thymeleaf 템플릿 엔진을 사용하지 않기 때문에 html 파일 위치를 바라보는 설정값 작성

# 정적 자원(파일)이 저장돈 위치 경로 설정
# /** : 모든 경로들을 가져와 경로들의 패턴을 확보
# static 밑에 만드는, 이미지 폴더 밑의 이미지들같이 css파일, js, html 등 모든 파일의 경로를 확인
spring.mvc.static-path-pattern=/**

# static 폴더 밑 파일들을 java에서 사용 가능
spring.web.resources.static-locations=classpath:/static/

#간단하게 주소 설정을 해결하는 방법
#1. thymeleaf 템플릿 엔진을 이용
#2. groovy 템플릿 엔진을 이용
#3. mustache 템플릿 엔진을 이용 : html 문서를 출력하기 위해 추가 설정이 필요함
# -> prefix(어느 폴더에서 시작하는가), suffix(어느 확장자명으로 종료하는가)

# 템플릿 엔진의 경우 react를 build 하기 전까지 사용할 필요가 없지만 react를 build해서 사용할 경우 필요. 설정해주는 것이 좋음
# 템플릿 엔진이 없다면 config 파일을 작성해서 설정